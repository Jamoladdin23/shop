from django.contrib.auth.decorators import login_required
from django.contrib.auth import login
from django.http import JsonResponse
from django.shortcuts import get_object_or_404, render, redirect
from django.utils.timezone import localtime

from .models import Cart, CartItem, Product, Category, Order, OrderItem
from .forms import CustomUserCreationForm, OrderForm
from django.contrib import messages
from django.contrib.auth.views import LoginView
from .utils import send_telegram_message


class CustomLoginView(LoginView):
    template_name = 'store/login.html'


def update_cart_item(request, item_id):
    cart_item = get_object_or_404(CartItem, id=item_id)

    if cart_item.cart and cart_item.cart.user != request.user:
        return JsonResponse({'error': '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!'}, status=403)

    if request.method == 'POST':
        new_quantity = request.POST.get('quantity')

        if new_quantity and new_quantity.isdigit() and int(new_quantity) > 0:
            cart_item.quantity = int(new_quantity)
            cart_item.save()
            return JsonResponse({'success': True, 'quantity': cart_item.quantity})

        return JsonResponse({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'}, status=400)

    return JsonResponse({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞'}, status=400)


def category_list(request):
    categories = Category.objects.all()
    return render(request, 'store/category_list.html', {'categories': categories})


def category_detail(request, category_id):
    category = Category.objects.get(id=category_id)
    products = category.products.all()  # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    return render(request, 'store/category_detail.html', {'category': category, 'products': products})


def product_list(request):
    products = Product.objects.all()
    return render(request, 'store/product_list.html', {'products': products})


def product_detail(request, product_id):
    product = get_object_or_404(Product, id=product_id)
    product_images = product.images.all()  # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    return render(request, 'store/product_detail.html', {'product': product, 'product_images': product_images})


def add_to_cart(request, product_id):
    if request.method == "POST":
        try:
            product = get_object_or_404(Product, id=product_id)

            # üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if request.user.is_authenticated:
                cart, _ = Cart.objects.get_or_create(user=request.user)
            else:
                session_key = request.session.session_key
                if not session_key:
                    request.session.create()
                session_key = request.session.session_key

                cart, _ = Cart.objects.get_or_create(session_key=session_key)  # ‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö

            # üìå –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
            cart_item, created = CartItem.objects.get_or_create(cart=cart, product=product)
            if not created:
                cart_item.quantity += 1
                cart_item.save()

            return JsonResponse({"success": True, "message": "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!"})

        except Exception as e:
            return JsonResponse({"success": False, "error": str(e)})

    return JsonResponse({"success": False, "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å"})


def cart_view(request):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if request.user.is_authenticated:
        user = request.user
        cart, _ = Cart.objects.get_or_create(user=user)  # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    else:
        session_key = request.session.session_key
        if not session_key:
            request.session.create()
        session_key = request.session.session_key

        cart, _ = Cart.objects.get_or_create(session_key=session_key)  # –ö–æ—Ä–∑–∏–Ω–∞ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö

    #  –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    cart_items = CartItem.objects.filter(cart=cart)
    total_price = sum(item.product.price * item.quantity for item in cart_items)

    return render(request, 'store/cart.html', {'cart_items': cart_items, 'total_price': total_price})


def remove_cart_item(request, item_id):
    cart_item = get_object_or_404(CartItem, id=item_id)

    # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    cart_item.delete()

    return redirect('cart_view')


def clear_cart(request):
    cart = Cart.objects.filter(user=request.user).first()
    if cart:
        CartItem.objects.filter(cart=cart).delete()
    return redirect('cart_view')


def signup(request):
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)  # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
            messages.success(request, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.')
            return redirect('product_list')

        else:
            messages.error(request, '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.')
    else:
        form = CustomUserCreationForm()
    return render(request, 'store/signup.html', {'form': form})

@login_required
def place_order(request):
    if request.method == "POST":
        recipient_name = request.POST.get("recipient_name")
        address = request.POST.get("address")
        phone_number = request.POST.get("phone_number")

        if not recipient_name or not address or not phone_number:
            return JsonResponse({"success": False, "error": "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!"})

        user = request.user
        cart = Cart.objects.get(user=request.user)
        cart_items = CartItem.objects.filter(cart=cart)

        if not cart_items:
            return JsonResponse({"success": False, "error": "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!"})

        order = Order.objects.create(
            user=request.user,
            recipient_name=recipient_name,
            address=address,
            phone_number=phone_number,
            email = user.email
        )

        order_summary = []  # üîπ –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        total_price = 0

        for item in cart_items:
            OrderItem.objects.create(order=order, product=item.product, quantity=item.quantity)
            total_price += item.product.price * item.quantity
            order_summary.append(f"{item.product.name} x {item.quantity} = {item.product.price * item.quantity} Som")

        cart_items.delete()

        message = (
                f"üì¶New ZAKAZ \n"
                f"üåê{user.username}ni Accountidan galdi!\n"
                f"üìß Accountni Emaili: {user.email}\n\n"
                
                f"üìãZakazni Danniylari! \n\n"
                f"üë§ Ismi: {recipient_name} \n"
                f"üìç Adresi: {address}\n"
                f"üì± Tel: {phone_number}\n\n"
                f"‚è≥ –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {localtime(order.created_at).strftime('%d.%m.%Y %H:%M')}\n\n"  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞
                f"üõí Product:\n\n" + "\n".join(order_summary) + f"\n\nüí∞ Obshiy Baxosi: {total_price}som"
        )
        # ‚úÖ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ç–æ
        send_telegram_message(message)

        return JsonResponse({"success": True})

    return render(request, "store/place_order.html")


def order_success(request):
    return render(request, 'store/order_success.html')


def payment_view(request):
    pass  # –ó–∞–≥–ª—É—à–∫–∞, –ø–æ–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ –Ω—É–∂–µ–Ω
